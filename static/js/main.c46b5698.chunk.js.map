{"version":3,"sources":["draggable/list/List.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["placeholder","document","createElement","className","List","props","items","setItems","useState","undefined","dragged","setDragged","over","setOver","dragStart","e","currentTarget","dataTransfer","effectAllowed","setData","dragEnd","style","display","parentNode","removeChild","data","from","Number","dataset","id","to","splice","onDragOver","preventDefault","target","insertBefore","map","color","i","data-id","key","draggable","onDragEnd","onDragStart","App","displayList","setDisplayList","colors","setColors","cursor","onClick","paddingLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRAIIA,G,MAAcC,SAASC,cAAc,OACzCF,EAAYG,UAAY,cAOjB,IAAMC,EAAO,SAACC,GAAsB,IACjCC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SADyB,EAGVC,wBAASC,GAHC,mBAGjCC,EAHiC,KAGxBC,EAHwB,OAIhBH,wBAASC,GAJO,mBAIjCG,EAJiC,KAI3BC,EAJ2B,KAMlCC,EAAY,SAACC,GACjB,IAAML,EAAUK,EAAEC,cAClBL,EAAWD,GACXK,EAAEE,aAAaC,cAAgB,OAC/BH,EAAEE,aAAaE,QAAQ,YAAaT,IAGhCU,EAAU,SAACL,GACf,IAAML,EAAUK,EAAEC,cAClBL,EAAWD,GACXA,EAAQW,MAAMC,QAAU,QACxBZ,EAAQa,WAAWC,YAAYxB,GAG/B,IAAMyB,EAAI,YAAOnB,GAEboB,EAAOhB,EAAUiB,OAAOjB,EAAQkB,QAAQC,IAAM,EAG9CC,EAAKlB,EAAOe,OAAOf,EAAKgB,QAAQC,IAAM,EAEtCH,EAAOI,GAAIA,IAEfL,EAAKM,OAAOD,EAAI,EAAGL,EAAKM,OAAOL,EAAM,GAAG,IACxCnB,EAASkB,IA+BX,OACE,yBAAKtB,UAAU,uBACb,wBAAI6B,WA9BS,SAACjB,GAChBA,EAAEkB,iBAEFvB,EAAQW,MAAMC,QAAU,OACG,gBAAvBP,EAAEmB,OAAO/B,YAGbU,EAAQE,EAAEmB,QAEVnB,EAAEmB,OAAOX,WAAWY,aAAanC,EAAae,EAAEmB,WAIzC5B,EAAM8B,KAAI,SAACC,EAAeC,GAC/B,OACE,wBACEC,UAASD,EACTE,IAAKF,EACLG,UAAU,OACVC,UAAWtB,EACXuB,YAAa7B,GAEZuB,SCjBIO,EA3CH,WAAO,IAAD,EACsBpC,oBAAS,GAD/B,mBACTqC,EADS,KACIC,EADJ,OAGYtC,mBAAS,CACnC,OACA,OACA,OACA,SACA,QACA,QACA,SAVc,mBAGTuC,EAHS,KAGDC,EAHC,KAahB,OACE,yBAAK7C,UAAU,OACb,4DAEA,0BACEkB,MAAO,CAAE4B,OAAQ,WACjBC,QAAS,kBAAMJ,GAAeD,KAFhC,iBAIiB,IACf,uBACE1C,UAAS,cACN0C,EAAiC,kBAAnB,kBAEjBxB,MAAO,CAAE8B,YAAa,UAIzBN,GACC,yBAAK1C,UAAU,qBACb,kBAAC,EAAD,CAAMG,MAAOyC,EAAQxC,SAAUyC,OC3BrBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1D,SAAS2D,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c46b5698.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./list.styles.scss\";\n\nvar placeholder = document.createElement(\"li\");\nplaceholder.className = \"placeholder\";\n\ninterface ListProps {\n  items: any;\n  setItems: (payload: any) => void;\n}\n\nexport const List = (props: ListProps) => {\n  const { items, setItems } = props;\n\n  const [dragged, setDragged] = useState(undefined);\n  const [over, setOver] = useState(undefined);\n\n  const dragStart = (e: any) => {\n    const dragged = e.currentTarget;\n    setDragged(dragged);\n    e.dataTransfer.effectAllowed = \"move\";\n    e.dataTransfer.setData(\"text/html\", dragged);\n  };\n\n  const dragEnd = (e: any) => {\n    const dragged = e.currentTarget;\n    setDragged(dragged);\n    dragged.style.display = \"block\";\n    dragged.parentNode.removeChild(placeholder);\n\n    //update state\n    const data = [...items];\n    //console.log(\"data\", data);\n    let from = dragged ? Number(dragged.dataset.id) : 0;\n    //console.log(\"from\", from);\n    //@ts-ignore\n    let to = over ? Number(over.dataset.id) : 0;\n    //console.log(\"to\", to);\n    if (from > to) to--;\n    //console.log(\"from > to\", from > to);\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    setItems(data);\n  };\n\n  const dragOver = (e: any) => {\n    e.preventDefault();\n    //@ts-ignore\n    dragged.style.display = \"none\";\n    if (e.target.className === \"placeholder\") {\n      return;\n    }\n    setOver(e.target);\n\n    e.target.parentNode.insertBefore(placeholder, e.target);\n  };\n\n  const listItems = () => {\n    return items.map((color: string, i: string) => {\n      return (\n        <li\n          data-id={i}\n          key={i}\n          draggable='true'\n          onDragEnd={dragEnd}\n          onDragStart={dragStart}\n        >\n          {color}\n        </li>\n      );\n    });\n  };\n\n  return (\n    <div className='draggable-component'>\n      <ul onDragOver={dragOver}>{listItems()}</ul>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\nimport { AppDragDropDemo } from \"./draggable/todo/AppDragDropDemo\";\n\nimport \"./App.scss\";\nimport { List } from \"./draggable/list/List\";\n\nconst App = () => {\n  const [displayList, setDisplayList] = useState(false);\n\n  const [colors, setColors] = useState([\n    \"Cyan\",\n    \"Aqua\",\n    \"Blue\",\n    \"Yellow\",\n    \"Black\",\n    \"White\",\n    \"Gray\",\n  ]);\n\n  return (\n    <div className='App'>\n      <h2>Typescript and SASS test app</h2>\n\n      <span\n        style={{ cursor: \"pointer\" }}\n        onClick={() => setDisplayList(displayList ? false : true)}\n      >\n        Draggable list{\" \"}\n        <i\n          className={`far ${\n            !displayList ? \"fa-plus-square\" : \"fa-minus-square\"\n          }`}\n          style={{ paddingLeft: \"5px\" }}\n        ></i>\n      </span>\n\n      {displayList && (\n        <div className='section-container'>\n          <List items={colors} setItems={setColors} />\n        </div>\n      )}\n      {/*\n         <AppDragDropDemo />\n         <i class=\"far fa-minus-square\"></i>\n     */}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}